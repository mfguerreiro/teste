# A mensagem do commit deve ser estruturada da seguinte forma: 
# --- 
# <type> (<issue>): <description>
# --- 
# Exemplo:
# --- 
# feat (SME-833): Endpoint for producing messages for job topics 
# --- 
# OBS: Campo description deve ser em inglês e body (caso tenha) em português. 

# O commit contém os seguintes elementos estruturais para comunicar a intenção aos consumidores do repositório: 

# 1. fix: um commit do type fix corrige um bug na base de código. 
# 2. feat: um commit do type feat introduz um novo recurso na base de código.   

# Types diferentes de fix: e feat: são permitidos, por exemplo [@commitlint/config-conventional](https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional) (baseado na [the Angular convention](https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines)). 

#     Os types recomendados:   

#     - build: Alterações que afetam o sistema de build ou dependências externas (escopos de exemplo: gulp, broccoli, npm) 

#     - ci: alterações em arquivos e scripts de configuração de CI (escopos de exemplo: Travis, Circle, BrowserStack, SauceLabs) 

#     - docs: alterações somente na documentação 

#     - feat: nova feature/melhoria/recurso 

#     - fix: correção de bug 

#     - perf: uma mudança de código que melhora o desempenho 

#     - refactor: uma alteração de código que não corrige um bug nem adiciona um novo recurso 

#     - style: alterações que não afetam o significado do código (espaço em branco, formatação, ponto e vírgula ausente etc.) 

#     - test: adicionando testes ausentes ou corrigindo testes existentes 